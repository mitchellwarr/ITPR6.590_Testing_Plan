package shoppingproject.gui;

import gui.helpers.SimpleListModel;
import java.awt.Window;
import javax.swing.JOptionPane;
import shoppingproject.dao.DAOException;
import shoppingproject.dao.DbDao;
import shoppingproject.dao.IDAO;
import shoppingproject.dao.ListDao;
import shoppingproject.domain.Product;
import shoppingproject.gui.helpers.ValidationHelper;

/**
 * INFO221 Project
 * Product editor JDialog form
 * @author jamal572
 */
public class ProductEditor extends javax.swing.JDialog {

    //instance of our product list from the DAO
    private IDAO productsList;

    //Model used for the combobox provided by gui.helpers package
    private SimpleListModel categoryListModel = new SimpleListModel();
    
    //Create an instance of product and insert data from form
    private Product insertProduct = new Product();
    
    //Validation helper
    ValidationHelper validHelp = new ValidationHelper();
    
    /**
     * Creates new form ProductEditor
     * @param modal sets whether or not parent window is accessible
     * @param dao injected reference to the DAO from main
     * @param parent parent window calling JDialog to open
     */
    public ProductEditor(Window parent, boolean modal, IDAO dao) {
        super(parent);
        super.setModal(modal);
        initComponents();
        
        //init the dao using an injected instance from main
        this.productsList = dao;
        
        //pull data from DAO and update category list
        this.categoryListModel.updateItems(productsList.getCategoryList());

        //update our combobox to use the helper model
        this.categoryCombo.setModel(categoryListModel);
        
        //add formating to number text fields
        validHelp.addTypeFormatter(txtID, "#0", Integer.class);
        validHelp.addTypeFormatter(txtPrice, "#0.00", Double.class);
        validHelp.addTypeFormatter(txtQuantityInStock, "#0.00", Double.class);
        
    }
    
    /**
     * Creates new form ProductEditor in window mode for editing products from
     * the report dialog box directly
     * @param modal sets whether or not parent window is accessible
     * @param dao injected reference to the DAO from main
     * @param productForEdit a reference to a product to edit from ReportDialog
     * @param parent parent window calling JDialog to open
     */
    public ProductEditor(Window parent, boolean modal, Product productForEdit, IDAO dao) {
        this(parent, modal, dao);
        
        //With the passed in product object fill the form fields 
        this.insertProduct = productForEdit;
        
        //Update text areas with data from product
        txtID.setValue(insertProduct.getProductID());
        txtName.setText(insertProduct.getName());
        txtDescription.setText(insertProduct.getDescription());
        categoryCombo.setSelectedIndex(0);
        txtPrice.setValue(insertProduct.getPrice());
        txtQuantityInStock.setValue(insertProduct.getQuantityInStock());
        
        //disable changing product ID for obvious reasons
        txtID.setEditable(false);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelID = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        labelDescription = new javax.swing.JLabel();
        labelPrice = new javax.swing.JLabel();
        categoryCombo = new javax.swing.JComboBox<>();
        labelQuantityInStock = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        labelCategory = new javax.swing.JLabel();
        txtID = new javax.swing.JFormattedTextField();
        txtPrice = new javax.swing.JFormattedTextField();
        txtQuantityInStock = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Product Editor");
        setBackground(new java.awt.Color(0, 146, 255));
        setName("dialogProductEditor"); // NOI18N

        labelID.setText("ID");

        labelName.setText("Name");

        txtName.setName("txtName"); // NOI18N

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        txtDescription.setName("txtDescription"); // NOI18N
        jScrollPane1.setViewportView(txtDescription);

        labelDescription.setText("Description");

        labelPrice.setText("Price");

        categoryCombo.setEditable(true);
        categoryCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoryCombo.setName("cmbCategory"); // NOI18N

        labelQuantityInStock.setText("Quantity in Stock");

        btnSave.setText("Save");
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        labelCategory.setText("Category");

        txtID.setName("txtID"); // NOI18N

        txtPrice.setName("txtPrice"); // NOI18N

        txtQuantityInStock.setName("txtStock"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelQuantityInStock, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelCategory, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelDescription, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelID, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtID)
                            .addComponent(txtPrice)
                            .addComponent(txtQuantityInStock)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(labelDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelQuantityInStock)
                    .addComponent(txtQuantityInStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method saves a product to DAO
     * @param evt object generated by button clicked event for Save product
     * button
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //Getter methods for retrieving data from form inputs
        try {
        Integer productID = (Integer)txtID.getValue();
        String name = txtName.getText();
        String description = txtDescription.getText();
        String category = (String) categoryCombo.getSelectedItem();
        
        //TODO make these return Double object and not primitive double
//        Double price = Double.valueOf(txtPrice.getText());
        Double price = (Double) txtPrice.getValue();
        
//        Double quantityInStock = Double.valueOf(txtQuantityInStock.getText());
        Double quantityInStock = (Double) txtQuantityInStock.getValue();
        
        //Only used for debuggin purposes to check Save button works
        //System.out.println(insertProduct.toString());
        
        insertProduct.setProductID(productID);
        insertProduct.setName(name);
        insertProduct.setDescription(description);
        insertProduct.setCategory(category);
        insertProduct.setPrice(price);
        insertProduct.setQuantityInStock(quantityInStock);
        if (validHelp.isObjectValid(insertProduct)) {
        //use add prduct method to add prouct to DAO
        productsList.addProduct(insertProduct);
        
        this.dispose();
        }
        } catch (DAOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "DataBase Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * Closes the product editor dialog
     * @param evt object generated by button clicked event for Cancel button
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the look and feel */
//
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Metal".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ProductEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ProductEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ProductEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ProductEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                ProductEditor dialog = new ProductEditor(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> categoryCombo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCategory;
    private javax.swing.JLabel labelDescription;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labelQuantityInStock;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JFormattedTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JFormattedTextField txtPrice;
    private javax.swing.JFormattedTextField txtQuantityInStock;
    // End of variables declaration//GEN-END:variables

}
